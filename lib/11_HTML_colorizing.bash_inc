#!/bin/bash
# private functions, please no private changes - except improvements for all.
# please commit your changes back to the project

######################################################################################################
#
# sample invocation:
# 	cat ${InputLogfile}.txt | ToColorHTMLDOC | tee ${OutColoredFile}.html
# or
#   any_opening_html_stream | htmlstream
# 	do_something_that_writes_to_stdout | ColorizeHTML | htmlstream
#   any_closing_html_stream | htmlstream
# or
#   echo -e "OKAY, Yes we can\nWARNING: new president\nERROR: crazy hair dude\nSUCCESS: The Germans schaffen das\n" | ToColorHTMLDOC | tee email_to_the_people.html
#
######################################################################################################


######################################################################################################
#
function HTML_opening {
	cat <<-HTMLINTRO_WITH_STYLES
	<!DOCTYPE html>
	<html lang="en-US">
	<head>
		<style>
		table {
		  <!-- border: 1px solid black; -->
		  border-collapse: collapse;
		}
		th, td {
		  text-align: left;
		  padding: 10px;
		}
		th {
		  background-color: #4CAF50;
		  color: white;
		}
		tr:nth-child(even) {background-color: #f2f2f2;}
		tr:hover {background-color: #757575;}
		</style>
	</head>
	<body>
	HTMLINTRO_WITH_STYLES
}

######################################################################################################
#
function HTML_closing {
	cat <<-HTMLOUTRO
	</body>
	</html>
	HTMLOUTRO
}

######################################################################################################
#
function html_red { 
	echo -en ${HtmlColorERROR}
	}

######################################################################################################
#
function html_grn { 
	echo -en ${HtmlColorOKAY}
	}

######################################################################################################
#
function html_yel {
	echo -en ${HtmlColorWARN}
	}

######################################################################################################
#
function html_end {
	echo -en '<br>'${HtmlColorNORMAL}
	}

######################################################################################################
#
# generate a complete HTML file/stream from stdin
#
function ToColorHTMLDOC {
		echo "opening" >&2
	HTML_opening
		echo "head done" >&2
	ColorizeHTML
		echo "body done" >&2
	HTML_closing
		echo "closed" >&2
}

######################################################################################################
#
# generate a colored fragment of HTML file/stream from stdin,
# to become a complete HTML, th Header and trailer need to get prefixed/postfixed, s.a. ToColorHTMLDOC()
#
function ColorizeHTML {
    while IFS='' read -r line; do
        if   [[ ${line} =~ ${MatchERROR} ]]; then
            echo -e "$(html_red)${line}$(html_end)"
        elif [[ ${line} =~ ${MatchWARN} ]]; then
            echo -e "$(html_yel)${line}$(html_end)"
        elif [[ ${line} =~ ${MatchOKAY} ]]; then
            echo -e "$(html_grn)${line}$(html_end)"
        else
            echo "${line}<br>";
        fi;
    done
	exit ${PIPESTATUS[0]};
}
#
######################################################################################################
