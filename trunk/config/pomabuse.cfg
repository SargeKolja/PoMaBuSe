# best view with <TAB SIZE 4> and EOL=\r (linux)
# SYNTAX: bash command interpreter (linux, MSYS, git-bash, ...)

# ----------- config const value assignments -------
#
# time value syntax: see linux "sleep" command (man sleep)
SleepBetweenScans=15m
default_report_engine=stderr_ascii_report_engine	# this will always work, but only in console and a bit hard to read
#default_report_engine=stderr_ansi_report_engine	# this will mostly work, but only in ANSI-console and hard to grep/parse
REPORT_ENGINE="${default_report_engine}"
REPORT_ENGINE_FMT=ascii
FromMail="${USER}@$(hostname)"		# your account which is defined in sendmail / msmtp config (or an alias reflected via /etc/alias to mailer config)
ToAdminMail="root"					# your build system maintainer, typically defined in /etc/aliases

UseAnsiColorFilter=true				# use immediate Filtering on compiler output? false is writing the logfile without \033[.. 
# bash regex =~ matchings for coloring lines
MatchWARN='^.*(\<warning\>)|(\<Warning\>)|(\<WARNING\>)|(No rule to make target.*Stop).*$'
MatchERROR='^.*(((\<error\>)|(\<Error\>)|(\<ERROR\>))((:)|( [0-9])))|((\<failed\>)|(\<Failed\>)|(\<FAILED\>)|(---FAIL---[0-9]+)).*$'
MatchOKAY='((\<OKAY\>)|(\<Okay\>)|(\<okay\>)|(\<OK\>)|(\<ok\>))|((\<SUCCESS\>)|(\<Success\>)|(\<success\>)|(\<successfully\>))|(---OKAY---[0-9]+)'
MatchANSI='\x1b\[[0-9;]*m'
# Ansi terminal codes for coloring lines
AnsiColorERROR='\033[0;31;7m'		# Red inverse for ERROR lines
AnsiColorWARN='\033[0;33;1m'		# Yellow bright for WARNING lines
AnsiColorOKAY='\033[0;32;7m'		# Green inverse for OKAY/WELL DONE lines
AnsiColorNORMAL='\033[0m'			# back to normal color
# HTML codes for coloring lines in HTML emails
HtmlColorERROR='<p style="color:black;background-color:red">'
HtmlColorOKAY='<p style="color:black;background-color:lightgreen">'
HtmlColorWARN='<p style="color:yellow;background-color:black">'
HtmlColorNORMAL='</p>'

#
# ----------- config const value assignments -------


# ----------- config scripts -----------------------
#
# getconf _NPROCESSORS_ONLN
# nproc --all
# LANG=C grep -c ^proc /proc/cpuinfo | wc -l
#
if [ -z $(which nproc 2>/dev/null) ]; then
	NUM_CPUS="$(nproc --all)"
else
	NUM_CPUS="$(LANG=C grep --count ^proc /proc/cpuinfo)" # baroque, but wide spread
fi

if [ -z "${NUM_CPUS}"    ]; then NUM_CPUS=1; fi
if [ "${NUM_CPUS}" = "0" ]; then NUM_CPUS=1; fi

MAKE_ON_X_CORES="-j ${NUM_CPUS}"

VCS_JOBDIR_TYPE=svn
VCS_JOBDIR_UPDATE=up
VCS_JOBDIR_UPDATE_LOOP=Y
#
# ----------- config scripts -----------------------
